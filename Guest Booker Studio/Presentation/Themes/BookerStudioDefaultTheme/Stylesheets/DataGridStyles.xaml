<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!--Yellowish-->
	<!--<Color x:Key="SelectedBrushStart" R="#F6" G="#ED" B="#B3"/>
	<Color x:Key="SelectedBrushEnd"  R="#ED" G="#C2" B="#50" A="#FF"/>-->
	<!--<LinearGradientBrush x:Key="SelectedBrush" StartPoint="0,0" EndPoint="0,1"  >
		<GradientStop Offset="-0.2" Color="{StaticResource SelectedBrushStart}"/>
		<GradientStop Offset="1" Color="{StaticResource SelectedBrushEnd}"/>
	</LinearGradientBrush>-->

	<!--<LinearGradientBrush x:Key="LightRowBrush0" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Offset="0.5" Color="#66ffffff"/>
		<GradientStop Offset="0.5" Color="#36FFFFFF"/>
		<GradientStop Offset="1" Color="#B5EBE7E7"/>
	</LinearGradientBrush>-->
	<LinearGradientBrush x:Key="LightRowBrush0" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Offset="0.5" Color="#66FFFFFF"/>
		<GradientStop Offset="0.5" Color="#36EEEEEE"/>
		<GradientStop Offset="1" Color="#B5DDDDDD"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="LightRowBrush1" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Offset="0.5" Color="#66F6F3EE"/>
		<GradientStop Offset="0.5" Color="#36E9E6E2"/>
		<GradientStop Offset="1" Color="#B5CCBEA2"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="RolloverBrush" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Offset="0.5" Color="#FFF4FAFD"/>
		<GradientStop Offset="0.5" Color="#FFE2F5FF"/>
		<GradientStop Offset="1" Color="#FFCFEDFD"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HeaderBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0" Color="#BBB"/>
		<GradientStop Offset="0" Color="#6A6A6A"/>
		<GradientStop Offset="1" Color="#444"/>
	</LinearGradientBrush>
	<!--<LinearGradientBrush x:Key="HeaderBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0" Color="#FFF"/>
		<GradientStop Offset="2" Color="#DDD"/>
	</LinearGradientBrush>-->


	<!-- data grid row styled, custom colors and rollover/selection property triggers -->
	<Style TargetType="{x:Type DataGridRow}">
		<Setter Property="Foreground" Value="#333" />
		<Setter Property="BorderThickness" Value="0,0,0,0" />
		<Setter Property="BorderBrush" Value="#EEE" />
		<Style.Triggers>
			<Trigger Property="ItemsControl.AlternationIndex" Value="0">
				<Setter Property="Background" Value="{StaticResource LightRowBrush0}" />
			</Trigger>
			<Trigger Property="ItemsControl.AlternationIndex" Value="1">
				<Setter Property="Background" Value="{StaticResource LightRowBrush1}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{StaticResource RolloverBrush}" />
				<Setter Property="Foreground" Value="#333" />
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{StaticResource RolloverBrush}" />
				<Setter Property="Foreground" Value="#000" />
				<Setter Property="FontWeight" Value="ExtraBlack" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type DataGrid}">
		<Setter Property="Background" Value="#FFF" />
		<Setter Property="BorderBrush" Value="#FFF" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="AlternationCount" Value="2" />
		<Setter Property="HeadersVisibility" Value="Column" />
		<Setter Property="CanUserResizeColumns" Value="True" />
		<Setter Property="CanUserResizeRows" Value="True" />
	</Style>

	<!-- styled to remove the standard blue selection colour and increase the padding -->
	<Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="#FFF" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border Padding="5"  Background="{TemplateBinding Background}" 
							BorderBrush="{TemplateBinding BorderBrush}"  
							BorderThickness="{TemplateBinding BorderThickness}" 
							SnapsToDevicePixels="True">
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsKeyboardFocusWithin" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{StaticResource RolloverBrush}" />
				<Setter Property="Foreground" Value="#000" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- column headers styled to create a rounded tab effect and to add sort arrows -->
	<Style TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="BorderBrush" Value="Black" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{StaticResource RolloverBrush}"  />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid>
						<Border Name="MainBorder" BorderThickness="0,0,0,0" CornerRadius="0,0,0,0" BorderBrush="#FFF" Background="{StaticResource HeaderBrush}">
							<Grid>
								<!-- an overlayer glass effect -->
								<Border VerticalAlignment="Top" Name="GradientBorder" Height="10" CornerRadius="1,1,0,0"   BorderBrush="#777" Background="{StaticResource HeaderBrush}"/>
								<ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"
													  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
							</Grid>
						</Border>
						<Path Name="UpArrow" Fill="White" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,7,0" Visibility="Hidden">
							<Path.Data>
								<PathGeometry>
									<PathFigure StartPoint="0,0">
										<LineSegment Point="7,0"/>
										<LineSegment Point="3.5,6"/>
										<LineSegment Point="0,0"/>
									</PathFigure>
								</PathGeometry>
							</Path.Data>
						</Path>
						<Path Name="DownArrow" Fill="White" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,7,0" Visibility="Hidden">
							<Path.Data>
								<PathGeometry>
									<PathFigure StartPoint="0,6">
										<LineSegment Point="7,6"/>
										<LineSegment Point="3.5,0"/>
										<LineSegment Point="0,6"/>
									</PathFigure>
								</PathGeometry>
							</Path.Data>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter TargetName="UpArrow" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="DownArrow" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter TargetName="DownArrow" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="UpArrow" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- DataGridColumnHeadersPresenter styled to remove the DataGridColumnHeader that spans the entire grid -->
	<Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
					<Grid>
						<ItemsPresenter />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- a grouping style that uses an expander to render the rouped data -->
	<Style x:Key="GroupContainerStyle" TargetType="{x:Type GroupItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupItem}">
					<Expander IsExpanded="True" Background="#858383">
						<Expander.Header>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition/>
								</Grid.RowDefinitions>
								<StackPanel Orientation="Horizontal" TextBlock.Foreground="White" Margin="0,0,10,0">
									<TextBlock Text="{Binding Path=Name}"/>
									<TextBlock Text=" has uploaded "/>
									<TextBlock FontWeight="Bold" Text="{Binding Path=ItemCount}"/>
									<TextBlock Text=" photos"/>
								</StackPanel>
								<Line Grid.Column="1" SnapsToDevicePixels="true"  X1="0" X2="1" Stretch="Fill"  Stroke="Orange" StrokeThickness="1"/>
							</Grid>
						</Expander.Header>
						<ItemsPresenter />
					</Expander>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
		<Setter Property="Background" Value="#EEE"/>
	</Style>

	<!-- style the expander toggle button -->
	<ControlTemplate x:Key="ExpanderToggleButton" TargetType="ToggleButton">
		<Border Background="Black">
			<Path Name="Arrow" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center"
					  Data="M 0 0 L 4 4 L 8 0 Z"/>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="Arrow" Property="Data" Value="M 0 4 L 4 0 L 8 4 Z" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- expander styled to give a full width header and to provide access to the toggle button -->
	<Style TargetType="Expander">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Expander">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Name="ContentRow" Height="0"/>
						</Grid.RowDefinitions>
						<Border Name="Border" Grid.Row="0" Background="Black">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}" />
								<ContentPresenter Grid.Column="1" Margin="4" ContentSource="Header" RecognizesAccessKey="True" />
							</Grid>
						</Border>
						<Border Name="Content"  Grid.Row="1" Background="Transparent" BorderThickness="0">
							<ContentPresenter Margin="0,0,4,0" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=DesiredHeight}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>